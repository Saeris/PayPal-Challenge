<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <base href="<%- htmlWebpackPlugin.options.baseURL %>">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <script>
      delete window.fetch
    </script>
    <script>
      (function() {
        var newBrowser = (
          'fetch' in window &&
          'Promise' in window &&
          'assign' in Object &&
          'keys' in Object
        );
        if (!newBrowser) {
          var scriptEl = document.createElement('script');
          scriptEl.src = "<%= htmlWebpackPlugin.files.chunks["polyfills"].entry %>";
          scriptEl.async = false;
          scriptEl.type = "text/javascript";
          document.head.appendChild(scriptEl);
        }
      })();
    </script>
    <% for (key in htmlWebpackPlugin.files.css) { %>
      <link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="stylesheet">
    <% } %>
  </head>
  <body>
    <div id="app"></div>
    <% for (key in htmlWebpackPlugin.files.chunks) { if (key !== "polyfills") { %>
    <script src="<%= htmlWebpackPlugin.files.chunks[key].entry %>" type="text/javascript"></script>
    <% } } %>
    <% if (htmlWebpackPlugin.options.serviceWorker) { %>
      <script type="text/javascript">
      // Register Service worker
      (function() {
        if ('serviceWorker' in navigator) {
          navigator.serviceWorker
            .register('<%= htmlWebpackPlugin.options.serviceWorker %>')
            .then(function() {
              console.log('Service worker registered!');
            })
            .catch(function(error) {
              console.log('Error registering service worker: ', error);
            });
        } else {
          console.log('Not supported by browser');
        }
      })();
      </script>
    <% } %>
    <% if (htmlWebpackPlugin.options.googleAnalytics) { %>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      <% if (htmlWebpackPlugin.options.googleAnalytics.trackingId) { %>
        ga('create', '<%= htmlWebpackPlugin.options.googleAnalytics.trackingId%>', 'auto');
        <% } else { throw new Error("html-webpack-template requires googleAnalytics.trackingId config"); }%>
      <% if (htmlWebpackPlugin.options.googleAnalytics.pageViewOnLoad) { %>
        ga('send', 'pageview');
      <% } %>
    </script>
    <% } %>
  </body>
</html>
